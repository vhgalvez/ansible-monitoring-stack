---
# playbook/01_install_monitoring_stack.yml
# Instalación robusta de Prometheus + Grafana con Helm y configuración persistente
- name: 🧱 Instalar stack de monitoreo (Prometheus + Grafana)
  hosts: controller
  become: true
  gather_facts: false
  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    KUBECONFIG: "/home/victory/.kube/config"  # Usando la misma ruta de kubeconfig

  vars:
    kubeconfig_path: "/home/victory/.kube/config"

    # Configuración de Prometheus
    prometheus_container_port: 9091
    prometheus_service_port: 9091
    prometheus_storage_class: "longhorn"
    prometheus_pvc_size: "8Gi"
    prometheus_chart_version: "27.9.0"
    prometheus_service_type: "ClusterIP"
    prometheus_values_path: "/tmp/values-prometheus.yaml"

    # Configuración de Grafana
    grafana_container_port: 3000
    grafana_service_port: 3000
    grafana_storage_class: "longhorn"
    grafana_pvc_size: "5Gi"
    grafana_admin_user: "admin"
    grafana_admin_password: "admin123"
    grafana_chart_version: "8.12.1"
    grafana_service_type: "ClusterIP"
    grafana_values_path: "/tmp/values-grafana.yaml"

    # Extras
    node_exporter_port: 9100
    extra_scrape_config_path: "/tmp/extraScrapeConfigs.yaml"

  tasks:
    - name: ✅ Verificar que kubectl está disponible
      command: "/usr/local/bin/kubectl version --client"
      register: kubectl_check
      failed_when: kubectl_check.rc != 0
      changed_when: false

    - name: 📁 Crear namespace 'monitoring' si no existe
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: monitoring

    - name: 🔗 Configurar repositorios Helm
      block:
        - name: Añadir repo Prometheus
          command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          register: prometheus_repo
          failed_when: prometheus_repo.rc != 0 and "exists" not in prometheus_repo.stderr

        - name: Añadir repo Grafana
          command: helm repo add grafana https://grafana.github.io/helm-charts
          register: grafana_repo
          failed_when: grafana_repo.rc != 0 and "exists" not in grafana_repo.stderr

        - name: 🔄 Actualizar repos Helm
          command: helm repo update

    - name: 📄 Renderizar valores para Prometheus
      template:
        src: helm/prometheus/values-prometheus.yaml.j2
        dest: "{{ prometheus_values_path }}"

    - name: 📄 Renderizar extraScrapeConfigs.yaml para nodos externos
      template:
        src: templates/node_exporter/extraScrapeConfigs.yaml.j2
        dest: "{{ extra_scrape_config_path }}"

    - name: 🔐 Crear Secret con configuración de scraping externo
      shell: >
        kubectl create secret generic prometheus-additional-scrape-configs
        --from-file=extraScrapeConfigs.yaml={{ extra_scrape_config_path }}
        --namespace=monitoring --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
        PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

    - name: 🚀 Desplegar Prometheus con Helm
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: prometheus
        chart_ref: prometheus-community/prometheus
        release_namespace: monitoring
        chart_version: "{{ prometheus_chart_version }}"
        create_namespace: false
        values_files:
          - "{{ prometheus_values_path }}"
        state: present

    - name: 📄 Renderizar valores para Grafana
      template:
        src: helm/grafana/values-grafana.yaml.j2
        dest: "{{ grafana_values_path }}"

    - name: 🚀 Desplegar Grafana con Helm
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: grafana
        chart_ref: grafana/grafana
        release_namespace: monitoring
        chart_version: "{{ grafana_chart_version }}"
        create_namespace: false
        values_files:
          - "{{ grafana_values_path }}"
        state: present

    - name: 📦 Verificar estado de los pods en 'monitoring'
      shell: kubectl get pods -n monitoring
      register: pod_status
      changed_when: false
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
        PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

    - name: 🔍 Mostrar estado de los pods
      debug:
        var: monitoring_pods.stdout_lines

    - name: ✅ Confirmación final
      debug:
        msg: "✅ Stack Prometheus + Grafana desplegado con éxito."