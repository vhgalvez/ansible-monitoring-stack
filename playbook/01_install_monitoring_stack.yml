# playbook/01_install_monitoring_stack.yml
---
# 🧱 Instalar stack de monitoreo (Prometheus + Grafana)
- name: Instalar stack de monitoreo
  hosts: localhost
  become: true
  gather_facts: false
  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    KUBECONFIG: "{{ kubeconfig_path }}" # Se usa desde main.yml

  vars_files:
    - ../vars/main.yml

  tasks:
    - name: ✅ Verificar que kubectl está disponible
      command: "/usr/local/bin/kubectl version --client"
      register: kubectl_check
      failed_when: kubectl_check.rc != 0
      changed_when: false

    - name: 📁 Verificar si namespace '{{ monitoring_namespace }}' existe
      command: kubectl get namespace {{ monitoring_namespace }}
      register: monitoring_namespace_check
      failed_when: false
      changed_when: false

    - name: 📁 Crear namespace '{{ monitoring_namespace }}' si no existe
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ monitoring_namespace }}"
      when: monitoring_namespace_check.rc != 0

    - name: 📂 Crear directorio local para archivos renderizados
      file:
        path: "./rendered_files"
        state: directory
        mode: "0755"

    - name: 🔧 Añadir repos Helm y actualizar
      block:
        - name: ➕ Añadir repo Prometheus
          command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          register: prometheus_repo
          failed_when: prometheus_repo.rc != 0 and "exists" not in prometheus_repo.stderr
          changed_when: false

        - name: ➕ Añadir repo Grafana
          command: helm repo add grafana https://grafana.github.io/helm-charts
          register: grafana_repo
          failed_when: grafana_repo.rc != 0 and "exists" not in grafana_repo.stderr
          changed_when: false

        - name: 🔄 Actualizar repos Helm
          command: helm repo update
          changed_when: false

    - name: 📄 Renderizar valores de Prometheus
      template:
        src: helm/prometheus/values-prometheus.yaml.j2
        dest: "./rendered_files/values-prometheus.yaml"

    - name: 🚀 Desplegar Prometheus con Helm
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: prometheus
        chart_ref: prometheus-community/prometheus
        release_namespace: "{{ monitoring_namespace }}"
        chart_version: "{{ prometheus_chart_version }}"
        create_namespace: false
        values_files:
          - "./rendered_files/values-prometheus.yaml"
        state: present

    - name: 📄 Renderizar valores de Grafana
      template:
        src: helm/grafana/values-grafana.yaml.j2
        dest: "./rendered_files/values-grafana.yaml"

    - name: 🚀 Desplegar Grafana con Helm
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: grafana
        chart_ref: grafana/grafana
        release_namespace: "{{ monitoring_namespace }}"
        chart_version: "{{ grafana_chart_version }}"
        create_namespace: false
        values_files:
          - "./rendered_files/values-grafana.yaml"
        state: present

    - name: ⏱️ Esperar a que los pods estén listos
      shell: kubectl get pods -n {{ monitoring_namespace }}
      register: pod_status
      retries: 10
      delay: 6
      until: pod_status.rc == 0
      changed_when: false

    - name: 🔍 Mostrar estado de los pods
      debug:
        var: pod_status.stdout_lines

    - name: ✅ Confirmación final
      debug:
        msg: "✅ Stack Prometheus + Grafana desplegado con éxito con protección básica activada en ambos servicios."
