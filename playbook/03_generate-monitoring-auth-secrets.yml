# playbook\03_generate-monitoring-auth-secrets.yml
# 🔐 Generar y sellar los Secrets de autenticación básica para Prometheus y Grafana
- name: 🔐 Generar y sellar los Secrets de basic-auth para Prometheus y Grafana
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml # Cargar variables de entorno y configuraciones necesarias

  vars:
    files_dir: "{{ playbook_dir }}/files" # Directorio temporal para los archivos
    prometheus_secret_template: "../templates/secret/basic-auth-secret.yaml.j2"
    grafana_secret_template: "../templates/secret/basic-auth-secret.yaml.j2"
    prometheus_unsealed_path: "{{ files_dir }}/prometheus-dashboard-secret-unsealed.yaml"
    grafana_unsealed_path: "{{ files_dir }}/grafana-dashboard-secret-unsealed.yaml"
    prometheus_sealed_path: "{{ files_dir }}/prometheus-dashboard-sealed.yaml"
    grafana_sealed_path: "{{ files_dir }}/grafana-dashboard-sealed.yaml"

  tasks:
    - name: 📋 Verificar que kubeseal esté instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortar si kubeseal no está instalado
      fail:
        msg: "kubeseal no está instalado en {{ kubeseal_path }}"
      when: not kubeseal_check.stat.exists

    # Generación de contraseñas htpasswd para Prometheus y Grafana
    - name: 🔑 Generar htpasswd para Prometheus
      shell: echo "{{ prometheus_auth_pass }}" | htpasswd -i -B -n "{{ prometheus_auth_user }}"
      register: prometheus_htpasswd
      changed_when: false
      no_log: true

    - name: 🔑 Generar htpasswd para Grafana
      shell: echo "{{ grafana_auth_pass }}" | htpasswd -i -B -n "{{ grafana_auth_user }}"
      register: grafana_htpasswd
      changed_when: false
      no_log: true

    # Codificación base64 de las contraseñas generadas
    - name: ➕ Codificar Prometheus htpasswd en base64
      set_fact:
        prometheus_basic_auth: "{{ prometheus_htpasswd.stdout | b64encode }}"

    - name: ➕ Codificar Grafana htpasswd en base64
      set_fact:
        grafana_basic_auth: "{{ grafana_htpasswd.stdout | b64encode }}"

    - name: 📂 Asegurar directorio de archivos temporales
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0700" # Aseguramos que el directorio sea seguro

    # Renderizar Secrets planos para Prometheus y Grafana
    - name: 📅 Renderizar Secret plano para Prometheus
      template:
        src: "{{ prometheus_secret_template }}"
        dest: "{{ prometheus_unsealed_path }}"
      vars:
        basic_auth: "{{ prometheus_basic_auth }}"
        namespace_tpl: "{{ monitoring_namespace }}"
        secret_name: "{{ prometheus_secret_name }}"

    - name: 📅 Renderizar Secret plano para Grafana
      template:
        src: "{{ grafana_secret_template }}"
        dest: "{{ grafana_unsealed_path }}"
      vars:
        basic_auth: "{{ grafana_basic_auth }}"
        namespace_tpl: "{{ monitoring_namespace }}"
        secret_name: "{{ grafana_secret_name }}"

    # Sellar Secrets usando kubeseal
    - name: 🔐 Sellar Secret de Prometheus
      shell: >
        {{ kubeseal_path }} --controller-name sealed-secrets-controller
        --controller-namespace kube-system --format yaml
        < {{ prometheus_unsealed_path }} > {{ prometheus_sealed_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: 🔐 Sellar Secret de Grafana
      shell: >
        {{ kubeseal_path }} --controller-name sealed-secrets-controller
        --controller-namespace kube-system --format yaml
        < {{ grafana_unsealed_path }} > {{ grafana_sealed_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    # Limpiar archivos planos generados
    - name: ♻️ Limpiar secretos planos
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ prometheus_unsealed_path }}"
        - "{{ grafana_unsealed_path }}"

    # Aplicar Secrets sellados en Kubernetes
    - name: 🚀 Aplicar Secret sellado de Prometheus
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ prometheus_sealed_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: 🚀 Aplicar Secret sellado de Grafana
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ grafana_sealed_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
