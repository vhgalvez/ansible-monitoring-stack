# playbook\03_generate-monitoring-auth-secrets.yml
---
# 🔐 Genera y aplica Secrets + Middlewares (Prometheus & Grafana)
- name: 🔐 Generar y sellar los Secrets basic-auth (Prometheus + Grafana)
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    files_dir: "{{ playbook_dir }}/files"

    secrets:
      - name: prometheus
        user: "{{ prometheus_auth_user }}"
        pass: "{{ prometheus_auth_pass }}"
        secret_name: "{{ prometheus_secret_name }}"
        sealed_path: "{{ files_dir }}/prometheus-dashboard-sealed.yaml"
        unsealed_path: "{{ files_dir }}/prometheus-dashboard-unsealed.yaml"

      - name: grafana
        user: "{{ grafana_auth_user }}"
        pass: "{{ grafana_auth_pass }}"
        secret_name: "{{ grafana_secret_name }}"
        sealed_path: "{{ files_dir }}/grafana-dashboard-sealed.yaml"
        unsealed_path: "{{ files_dir }}/grafana-dashboard-unsealed.yaml"

  tasks:
    # ─────────── Validaciones previas ───────────
    - name: 📋 Verificar que kubeseal está instalado
      stat: { path: "{{ kubeseal_path }}" }
      register: kubeseal_chk

    - name: ❌ Salir si kubeseal no está presente
      fail:
        msg: "kubeseal no encontrado en {{ kubeseal_path }}."
      when: not kubeseal_chk.stat.exists

    - name: 📋 Verificar que htpasswd está disponible
      command: which htpasswd
      register: ht_chk
      changed_when: false
      failed_when: ht_chk.rc != 0

    - name: 🛑 Validar credenciales de entorno
      assert:
        that:
          - grafana_auth_user  | length > 0
          - grafana_auth_pass  | length > 0
          - prometheus_auth_user | length > 0
          - prometheus_auth_pass | length > 0
        fail_msg: "Faltan variables *_AUTH_* requeridas."

    - name: ✅ Asegurar que monitoring_namespace está definido
      assert:
        that: monitoring_namespace | length > 0
        fail_msg: "monitoring_namespace vacío o indefinido."

    - name: 📂 Crear carpeta local de archivos sellados
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0700"

    # ─────────── Generar & aplicar Secrets ───────────
    - name: 🔐 Generar / sellar / aplicar cada Secret
      include_tasks: tasks/generate_sealed_secret_inline.yml
      loop: "{{ secrets }}"
      loop_control: { loop_var: item }

    # ─────────── Middlewares ───────────
    - name: 📄 Renderizar Middlewares basicAuth
      template:
        src: "secret/{{ item.name }}_middleware.yaml.j2"
        dest: "{{ files_dir }}/{{ item.name }}-middleware.yaml"
      loop:
        - { name: prometheus }
        - { name: grafana }
      loop_control: { label: "{{ item.name }}" }

    - name: 🚀 Aplicar Middlewares al clúster
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ item }}
      loop:
        - "{{ files_dir }}/prometheus-middleware.yaml"
        - "{{ files_dir }}/grafana-middleware.yaml"
      changed_when: false
