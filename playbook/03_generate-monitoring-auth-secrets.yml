# playbook\03_generate-monitoring-auth-secrets.yml
---
- name: 🔐 Generar y sellar los Secrets de basic-auth para Prometheus y Grafana
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    files_dir: "{{ playbook_dir }}/files"
    basic_auth_template: "secret/basic-auth-secret.yaml.j2"
    secrets:
      - name: prometheus
        user: "{{ prometheus_auth_user }}"
        pass: "{{ prometheus_auth_pass }}"
        secret_name: "{{ prometheus_secret_name }}"
        sealed_path: "{{ files_dir }}/prometheus-dashboard-sealed.yaml"
        unsealed_path: "{{ files_dir }}/prometheus-dashboard-secret-unsealed.yaml"
      - name: grafana
        user: "{{ grafana_auth_user }}"
        pass: "{{ grafana_auth_pass }}"
        secret_name: "{{ grafana_secret_name }}"
        sealed_path: "{{ files_dir }}/grafana-dashboard-sealed.yaml"
        unsealed_path: "{{ files_dir }}/grafana-dashboard-secret-unsealed.yaml"

  tasks:
    - name: 📋 Verificar que kubeseal esté instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortar si kubeseal no está instalado
      fail:
        msg: "❌ kubeseal no está instalado en {{ kubeseal_path }}."
      when: not kubeseal_check.stat.exists

    - name: 📋 Verificar que htpasswd esté disponible
      command: which htpasswd
      register: htpasswd_check
      failed_when: htpasswd_check.rc != 0
      changed_when: false

    - name: ⚠️ Mostrar valores definidos para autenticación
      debug:
        msg:
          - "grafana_auth_user = {{ grafana_auth_user | default('undefined') }}"
          - "grafana_auth_pass = {{ grafana_auth_pass | default('undefined') }}"
          - "prometheus_auth_user = {{ prometheus_auth_user | default('undefined') }}"
          - "prometheus_auth_pass = {{ prometheus_auth_pass | default('undefined') }}"

    - name: 🛑 Abortar si faltan credenciales requeridas
      fail:
        msg: "❌ Faltan variables grafana_auth_* o prometheus_auth_*"
      when: >
        grafana_auth_user | default('') | length == 0 or
        grafana_auth_pass | default('') | length == 0 or
        prometheus_auth_user | default('') | length == 0 or
        prometheus_auth_pass | default('') | length == 0

    - name: ✅ Validar que monitoring_namespace es una cadena válida
      assert:
        that:
          - monitoring_namespace is string
          - monitoring_namespace | length > 0
        fail_msg: "❌ 'monitoring_namespace' no es una cadena válida."

    - name: 📂 Crear carpeta para secretos si no existe
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0700"

    - name: 🔁 Generar, renderizar, sellar y aplicar Secret para cada servicio
      block:
        - name: 🔑 Generar hash htpasswd
          shell: echo "{{ item.pass }}" | htpasswd -i -B -n "{{ item.user }}"
          register: htpasswd_output
          changed_when: false

        - name: ➕ Codificar en base64
          set_fact:
            basic_auth: "{{ htpasswd_output.stdout | b64encode }}"

        - name: 📄 Renderizar plantilla del Secret
          template:
            src: "{{ basic_auth_template }}"
            dest: "{{ item.unsealed_path }}"
          vars:
            basic_auth: "{{ basic_auth }}"
            namespace: "{{ monitoring_namespace }}"
            secret_name: "{{ item.secret_name }}"

        - name: 🔐 Sellar Secret con kubeseal
          shell: >
            {{ kubeseal_path }} --controller-name sealed-secrets-controller
            --controller-namespace kube-system --format yaml
            < {{ item.unsealed_path }} > {{ item.sealed_path }}
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"

        - name: ♻️ Eliminar el archivo no cifrado
          file:
            path: "{{ item.unsealed_path }}"
            state: absent

        - name: 🚀 Aplicar Secret sellado al clúster
          command: >
            {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ item.sealed_path }}
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
      loop: "{{ secrets }}"
      loop_control:
        label: "{{ item.name }}"