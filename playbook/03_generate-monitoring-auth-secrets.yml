# playbook\03_generate-monitoring-auth-secrets.yml
---
# 🔐 Generar y sellar los Secrets basic-auth (Prometheus + Grafana)
- name: 🔐 Generar y sellar los Secrets basic-auth (Prometheus + Grafana)
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml # ← variables globales

  vars:
    files_dir: "{{ playbook_dir }}/files"

    # Definición de los dos Secrets a crear
    secrets:
      - name: prometheus
        user: "{{ prometheus_auth_user }}"
        pass: "{{ prometheus_auth_pass }}"
        secret_name: "{{ prometheus_secret_name }}"
        sealed_path: "{{ files_dir }}/prometheus-dashboard-sealed.yaml"
        unsealed_path: "{{ files_dir }}/prometheus-dashboard-unsealed.yaml"
      - name: grafana
        user: "{{ grafana_auth_user }}"
        pass: "{{ grafana_auth_pass }}"
        secret_name: "{{ grafana_secret_name }}"
        sealed_path: "{{ files_dir }}/grafana-dashboard-sealed.yaml"
        unsealed_path: "{{ files_dir }}/grafana-dashboard-unsealed.yaml"

  tasks:
    # ────────── Validaciones previas ──────────
    - name: 📋 Verificar que kubeseal está instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortamos si kubeseal no está
      fail:
        msg: "❌ kubeseal no está instalado en {{ kubeseal_path }}."
      when: not kubeseal_check.stat.exists

    - name: 📋 Verificar que htpasswd está disponible
      command: which htpasswd
      changed_when: false
      failed_when: htpasswd_check.rc != 0
      register: htpasswd_check

    - name: 🛑 Abortamos si faltan credenciales básicas
      fail:
        msg: "❌ Faltan variables grafana_auth_* o prometheus_auth_*"
      when: >
        grafana_auth_user  | default('') | length == 0 or
        grafana_auth_pass  | default('') | length == 0 or
        prometheus_auth_user | default('') | length == 0 or
        prometheus_auth_pass | default('') | length == 0

    - name: ✅ Verificar que monitoring_namespace está definido
      assert:
        that:
          - monitoring_namespace | length > 0
        fail_msg: "❌ La variable 'monitoring_namespace' no está definida o está vacía."

    - name: 📂 Crear carpeta para archivos secretos
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0700"

    # ────────── Secret(s) basic-auth ──────────
    - name: 🔐 Generar, sellar y aplicar los Secrets
      include_tasks: tasks/generate_sealed_secret_inline.yml
      loop: "{{ secrets }}"
      loop_control:
        loop_var: item

    # ────────── Middlewares basic-auth ──────────
    - name: 📄 Renderizar Middlewares basicAuth para cada dashboard
      template:
        src: "secret/{{ item.name }}_middleware.yaml.j2"
        dest: "{{ files_dir }}/{{ item.name }}-middleware.yaml"
      loop:
        - {
            name: "prometheus",
            secret_name: "{{ prometheus_secret_name }}",
            middleware_name: "{{ prometheus_dashboard_middleware_name }}",
            namespace: "{{ monitoring_namespace }}",
          }
        - {
            name: "grafana",
            secret_name: "{{ grafana_secret_name }}",
            middleware_name: "{{ grafana_dashboard_middleware_name }}",
            namespace: "{{ monitoring_namespace }}",
          }
      loop_control:
        label: "{{ item.name }}"

    - name: 🚀 Aplicar Middlewares basicAuth
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ item }}
      loop:
        - "{{ files_dir }}/prometheus-middleware.yaml"
        - "{{ files_dir }}/grafana-middleware.yaml"
      changed_when: false
