# 🔐 Generar y sellar los Secrets de autenticación básica para Prometheus y Grafana
- name: 🔐 Generar y sellar los Secrets de basic-auth para Prometheus y Grafana
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml  # Variables definidas desde el archivo vars/main.yml

  vars:
    files_dir: "{{ playbook_dir }}/files"
    prometheus_secret_template: "../templates/secret/basic-auth-secret.yaml.j2"
    grafana_secret_template: "../templates/secret/basic-auth-secret.yaml.j2"
    prometheus_unsealed_path: "{{ files_dir }}/prometheus-dashboard-secret-unsealed.yaml"
    grafana_unsealed_path: "{{ files_dir }}/grafana-dashboard-secret-unsealed.yaml"
    prometheus_sealed_path: "{{ files_dir }}/prometheus-dashboard-sealed.yaml"
    grafana_sealed_path: "{{ files_dir }}/grafana-dashboard-sealed.yaml"

  tasks:
    - name: 📋 Verificar que kubeseal esté instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortar si kubeseal no está instalado
      fail:
        msg: "kubeseal no está instalado en {{ kubeseal_path }}"
      when: not kubeseal_check.stat.exists

    - name: 📋 Verificar que htpasswd esté disponible
      command: which htpasswd
      register: htpasswd_check
      failed_when: htpasswd_check.rc != 0
      changed_when: false

    # 🚨 Verificación explícita de variables
    - name: ⚠️ Mostrar valores de usuario y contraseña si están vacíos
      debug:
        msg:
          - "⚠️ grafana_auth_user = {{ grafana_auth_user | default('undefined') }}"
          - "⚠️ grafana_auth_pass = {{ grafana_auth_pass | default('undefined') }}"
          - "⚠️ prometheus_auth_user = {{ prometheus_auth_user | default('undefined') }}"
          - "⚠️ prometheus_auth_pass = {{ prometheus_auth_pass | default('undefined') }}"

    - name: 🛑 Abortamos si faltan variables requeridas
      fail:
        msg: "❌ Faltan variables prometheus_auth_user/pass o grafana_auth_user/pass"
      when: 
        - grafana_auth_user is not defined or grafana_auth_user == ""
        - grafana_auth_pass is not defined or grafana_auth_pass == ""
        - prometheus_auth_user is not defined or prometheus_auth_user == ""
        - prometheus_auth_pass is not defined or prometheus_auth_pass == ""

    # 🔑 Generar htpasswd para Prometheus
    - name: 🔑 Generar htpasswd para Prometheus
      shell: echo "{{ prometheus_auth_pass }}" | htpasswd -i -B -n "{{ prometheus_auth_user }}"
      register: prometheus_htpasswd
      changed_when: false

    # 🔑 Generar htpasswd para Grafana
    - name: 🔑 Generar htpasswd para Grafana
      shell: echo "{{ grafana_auth_pass }}" | htpasswd -i -B -n "{{ grafana_auth_user }}"
      register: grafana_htpasswd
      changed_when: false

    # ➕ Codificar ambos en base64
    - name: ➕ Codificar Prometheus htpasswd en base64
      set_fact:
        prometheus_basic_auth: "{{ prometheus_htpasswd.stdout | b64encode }}"

    - name: ➕ Codificar Grafana htpasswd en base64
      set_fact:
        grafana_basic_auth: "{{ grafana_htpasswd.stdout | b64encode }}"

    # 📁 Crear carpeta temporal
    - name: 📂 Asegurar directorio temporal
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0700"

    # 📄 Renderizar Secret plano para Prometheus
    - name: 📄 Renderizar Secret plano para Prometheus
      template:
        src: "{{ prometheus_secret_template }}"
        dest: "{{ prometheus_unsealed_path }}"
      vars:
        basic_auth: "{{ prometheus_basic_auth }}"
        namespace_tpl: "{{ monitoring_namespace }}"
        secret_name: "{{ prometheus_secret_name }}"

    # 📄 Renderizar Secret plano para Grafana
    - name: 📄 Renderizar Secret plano para Grafana
      template:
        src: "{{ grafana_secret_template }}"
        dest: "{{ grafana_unsealed_path }}"
      vars:
        basic_auth: "{{ grafana_basic_auth }}"
        namespace_tpl: "{{ monitoring_namespace }}"
        secret_name: "{{ grafana_secret_name }}"

    # 🔐 Sellar con kubeseal
    - name: 🔐 Sellar Secret de Prometheus
      shell: >
        {{ kubeseal_path }} --controller-name sealed-secrets-controller
        --controller-namespace kube-system --format yaml
        < {{ prometheus_unsealed_path }} > {{ prometheus_sealed_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: 🔐 Sellar Secret de Grafana
      shell: >
        {{ kubeseal_path }} --controller-name sealed-secrets-controller
        --controller-namespace kube-system --format yaml
        < {{ grafana_unsealed_path }} > {{ grafana_sealed_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    # ♻️ Limpiar temporales
    - name: ♻️ Limpiar secretos planos
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ prometheus_unsealed_path }}"
        - "{{ grafana_unsealed_path }}"

    # 🚀 Aplicar Secrets sellados
    - name: 🚀 Aplicar Secret sellado de Prometheus
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ prometheus_sealed_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: 🚀 Aplicar Secret sellado de Grafana
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ grafana_sealed_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"