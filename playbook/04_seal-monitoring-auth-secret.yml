# playbook\04_seal-monitoring-auth-secret.yml
# ===============================================================
#   Crear y cifrar el Secret de autenticaci√≥n b√°sica para Prometheus y Grafana
# - Genera hash htpasswd
# - Renderiza el Secret plano
# - Lo cifra con kubeseal para uso en ArgoCD o GitOps seguro
# ===============================================================
---
- name: üîê Generar y cifrar Secret para Prometheus y Grafana
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubeseal_path: "/usr/local/bin/kubeseal"
    kubectl_path: "/usr/local/bin/kubectl"
    python_bin: "/usr/bin/python3"
    files_dir: "{{ playbook_dir }}/files"
    rendered_prometheus_secret_path: "{{ files_dir }}/prometheus-dashboard-secret.yaml"
    rendered_grafana_secret_path: "{{ files_dir }}/grafana-dashboard-secret.yaml"
    sealed_prometheus_secret_path: "{{ files_dir }}/prometheus-dashboard-sealed.yaml"
    sealed_grafana_secret_path: "{{ files_dir }}/grafana-dashboard-sealed.yaml"
    traefik_namespace: "default" # Aseg√∫rate de configurar este namespace de manera correcta

  tasks:
    # üìã Verificar si kubeseal est√° instalado
    - name: Verificar si kubeseal est√° instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: Abortamos si kubeseal no est√° instalado
      fail:
        msg: "‚ùå kubeseal no est√° instalado en la ruta {{ kubeseal_path }}. Por favor, inst√°lalo."
      when: not kubeseal_check.stat.exists

    # üìã Verificar si kubectl est√° instalado
    - name: Verificar si kubectl est√° instalado
      stat:
        path: "{{ kubectl_path }}"
      register: kubectl_check

    - name: Abortamos si kubectl no est√° instalado
      fail:
        msg: "‚ùå kubectl no est√° instalado en la ruta {{ kubectl_path }}. Por favor, inst√°lalo."
      when: not kubectl_check.stat.exists

    # üìÅ Crear directorio para almacenar los secrets si no existe
    - name: Crear directorio para almacenar los secrets si no existe
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0755"

    # üîê Generar hash htpasswd para Prometheus
    - name: Generar hash htpasswd para Prometheus
      command: >
        {{ python_bin }} -c "import crypt; print('{{ prometheus_auth_user }}:' + crypt.crypt('{{ prometheus_auth_pass }}', crypt.mksalt(crypt.METHOD_MD5)))"
      register: prometheus_htpasswd_output
      changed_when: false

    # üîê Generar hash htpasswd para Grafana
    - name: Generar hash htpasswd para Grafana
      command: >
        {{ python_bin }} -c "import crypt; print('{{ grafana_auth_user }}:' + crypt.crypt('{{ grafana_auth_pass }}', crypt.mksalt(crypt.METHOD_MD5)))"
      register: grafana_htpasswd_output
      changed_when: false

    # üìÑ Renderizar plantilla de Secret YAML para Prometheus (plano)
    - name: Renderizar plantilla de Secret YAML para Prometheus (plano)
      template:
        src: ../templates/secrets/prometheus-dashboard-secret.yaml.j2
        dest: "{{ rendered_prometheus_secret_path }}"
      vars:
        prometheus_basic_auth: "{{ prometheus_htpasswd_output.stdout }}"

    # üìÑ Renderizar plantilla de Secret YAML para Grafana (plano)
    - name: Renderizar plantilla de Secret YAML para Grafana (plano)
      template:
        src: ../templates/secrets/grafana-dashboard-secret.yaml.j2
        dest: "{{ rendered_grafana_secret_path }}"
      vars:
        grafana_basic_auth: "{{ grafana_htpasswd_output.stdout }}"

    # üîê Cifrar el Secret de Prometheus con kubeseal
    - name: Cifrar el Secret de Prometheus con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace {{ traefik_namespace }}
        --format yaml
        < "{{ rendered_prometheus_secret_path }}" > "{{ sealed_prometheus_secret_path }}"
      args:
        executable: /bin/bash
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: false

    # üîê Cifrar el Secret de Grafana con kubeseal
    - name: Cifrar el Secret de Grafana con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace {{ traefik_namespace }}
        --format yaml
        < "{{ rendered_grafana_secret_path }}" > "{{ sealed_grafana_secret_path }}"
      args:
        executable: /bin/bash
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: false

    # Confirmaci√≥n de cifrado
    - name: Verificar que el Secret cifrado de Prometheus se haya generado
      stat:
        path: "{{ sealed_prometheus_secret_path }}"
      register: sealed_prometheus_secret_check

    - name: Abortamos si el archivo sellado de Prometheus no se gener√≥
      fail:
        msg: "‚ùå El archivo sellado de Prometheus {{ sealed_prometheus_secret_path }} no se gener√≥ correctamente."
      when: not sealed_prometheus_secret_check.stat.exists

    - name: Verificar que el Secret cifrado de Grafana se haya generado
      stat:
        path: "{{ sealed_grafana_secret_path }}"
      register: sealed_grafana_secret_check

    - name: Abortamos si el archivo sellado de Grafana no se gener√≥
      fail:
        msg: "‚ùå El archivo sellado de Grafana {{ sealed_grafana_secret_path }} no se gener√≥ correctamente."
      when: not sealed_grafana_secret_check.stat.exists

    # Mensaje final
    - name: Mensaje final
      debug:
        msg: "‚úÖ Secret de autenticaci√≥n cifrado correctamente para Prometheus y Grafana."
