# playbook/deploy_monitoring_stack.yml
---
- name: 🧩 Cargar variables de configuración desde main.yml
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Cargar variables de configuración
      debug:
        msg: "Variables cargadas correctamente desde vars/main.yml"

- name: Copy tls secrets
  import_playbook: 00_copy_tls_secret.yml

- name: Instalar stack de monitoreo (Prometheus + Grafana)
  import_playbook: 01_install_monitoring_stack.yml

- name: Instalar Node Exporter en máquinas externas (si aplica)
  import_playbook: 02_install_node_exporter.yml

- name: Generar y sellar los Secrets de autenticación básica para Prometheus y Grafana
  import_playbook: 03_generate-monitoring-auth-secrets.yml

- name: Verificación final del despliegue de Prometheus y Grafana
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  tasks:
    ############################################################################
    # 🔎  HEALTH-CHECK PROMETHEUS DASHBOARD
    ############################################################################
    - name: 🌐 Comprobar acceso al dashboard de Prometheus
      shell: >
        curl --http1.1 -k -u {{ prometheus_auth_user }}:{{ prometheus_auth_pass }}
        https://{{ prometheus_domain }}/
        --max-time 10 --silent --output /dev/null --write-out '%{{"{"}}http_code{{"}"}}'
      register: prometheus_status
      changed_when: false
      failed_when: prometheus_status.stdout not in ['200', '302', '307', '401']

    - name: 📊 Resultado HTTP de Prometheus
      debug:
        msg: "✅ Prometheus está accesible → Código HTTP: {{ prometheus_status.stdout }}"

    ############################################################################
    # 🔎  HEALTH-CHECK GRAFANA DASHBOARD
    ############################################################################
    - name: 🌐 Comprobar acceso al dashboard de Grafana
      shell: >
        curl --http1.1 -k -u {{ grafana_auth_user }}:{{ grafana_auth_pass }}
        https://{{ grafana_domain }}/
        --max-time 10 --silent --output /dev/null --write-out '%{{"{"}}http_code{{"}"}}'
      register: grafana_status
      changed_when: false
      failed_when: grafana_status.stdout not in ['200', '302', '307', '401']

    - name: 📊 Resultado HTTP de Grafana
      debug:
        msg: "✅ Grafana está accesible → Código HTTP: {{ grafana_status.stdout }}"