# playbook/tasks/generate_sealed_secret_inline.yml

# 🔐 Genera, sella y aplica un Secret de basic-auth (para Traefik)
# Requiere en item.*  → name, user, pass, secret_name, sealed_path, unsealed_path
# Variables globales → kubectl_path, kubeseal_path, kubeconfig_path, monitoring_namespace
---
- name: 🔑 Generar hash htpasswd para {{ item.name }}
  shell: |
    htpasswd -nbB {{ item.user | quote }} {{ item.pass | quote }}
  register: htpasswd_output
  changed_when: false
  failed_when: htpasswd_output.rc != 0

- name: ➕ Codificar resultado en base64 para {{ item.name }}
  set_fact:
    basic_auth: "{{ htpasswd_output.stdout | b64encode | regex_replace('\\n', '') }}"

- name: 📄 Renderizar Secret sin cifrar para {{ item.name }}
  template:
    src: "secret/{{ item.name }}_basic-auth-secret.yaml.j2"
    dest: "{{ item.unsealed_path }}"
  vars:
    namespace: "{{ monitoring_namespace }}"
    secret_name: "{{ item.secret_name }}"
    basic_auth: "{{ basic_auth }}"

- name: 🔐 Sellar Secret con kubeseal para {{ item.name }}
  shell: >
    {{ kubeseal_path }}
      --controller-name sealed-secrets-controller
      --controller-namespace kube-system
      --format yaml
      < {{ item.unsealed_path }} > {{ item.sealed_path }}
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: sealed_output
  changed_when: true
  failed_when: sealed_output.rc != 0

- name: ♻️ Eliminar archivo plano {{ item.unsealed_path }}
  file:
    path: "{{ item.unsealed_path }}"
    state: absent

- name: 🚀 Aplicar Secret sellado al clúster ({{ item.name }})
  command: >
    {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ item.sealed_path }}
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: kubectl_apply
  changed_when: "'configured' in kubectl_apply.stdout or 'created' in kubectl_apply.stdout"
