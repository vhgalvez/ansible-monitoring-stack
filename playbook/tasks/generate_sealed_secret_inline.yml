# playbook/tasks/generate_sealed_secret_inline.yml
# -----------------------------------------------
#  Genera, sella y aplica un Secret basic-auth (Traefik)
#  Espera en «item.*»:
#     name, user, pass, secret_name, unsealed_path, sealed_path
#  Variables globales requeridas:
#     kubectl_path, kubeseal_path, kubeconfig_path, monitoring_namespace
# -----------------------------------------------
- name: 🔑 Generar hash htpasswd (bcrypt) para {{ item.name }}
  shell: htpasswd -nbB {{ item.user | quote }} {{ item.pass | quote }}
  register: htpasswd_out
  changed_when: false
  failed_when: htpasswd_out.rc != 0

- name: ➕ Codificar el resultado en base64
  set_fact:
    basic_auth_b64: "{{ htpasswd_out.stdout | b64encode | regex_replace('\\n', '') }}"

- name: 📄 Renderizar Secret _sin_ cifrar
  template:
    src: "{{ playbook_dir }}/secret/{{ item.name }}_basic-auth-secret.yaml.j2"
    dest: "{{ item.unsealed_path }}"
  vars:
    secret_name: "{{ item.secret_name }}"
    namespace: "{{ monitoring_namespace }}"
    basic_auth: "{{ basic_auth_b64 }}"

# ─── Sellado fiable: cat | kubeseal (stdout) ─────────────────────────
- name: 🔐 Sellar el Secret con kubeseal
  shell: |
    cat "{{ item.unsealed_path }}" | {{ kubeseal_path }} \
      --controller-name sealed-secrets-controller \
      --controller-namespace kube-system \
      --format yaml
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: seal_out
  changed_when: true
  failed_when:
    - seal_out.rc != 0
    - seal_out.stdout | length == 0 # evita YAML vacío

- name: 💾 Guardar YAML sellado en disco
  copy:
    content: "{{ seal_out.stdout }}"
    dest: "{{ item.sealed_path }}"
    mode: "0600"

- name: ♻️ Eliminar el Secret _sin_ cifrar
  file:
    path: "{{ item.unsealed_path }}"
    state: absent

- name: 🚀 Aplicar el Secret sellado al clúster
  command: >
    {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ item.sealed_path }}
  register: kubectl_apply
  changed_when: "'created' in kubectl_apply.stdout or 'configured' in kubectl_apply.stdout"
