---
# 🚀 playbook/update_scrape_targets.yml
# Playbook para actualizar Prometheus y Grafana de manera limpia usando Helm upgrade.

- name: 🔄 Upgrade de Prometheus + Grafana (Helm upgrade)
  hosts: controller
  become: true
  gather_facts: false
  environment:
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    KUBECONFIG: "/home/victory/.kube/config"

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    prometheus_chart_version: "27.11.0"
    prometheus_values_path: "/tmp/values-prometheus.yaml"
    grafana_chart_version: "8.12.1"
    grafana_values_path: "/tmp/values-grafana.yaml"

  tasks:
    - name: 📂 Verificar si Prometheus está instalado
      shell: helm list -n monitoring --filter '^prometheus$' --short || true
      register: prometheus_installed
      changed_when: false

    - name: 📂 Verificar si Grafana está instalado
      shell: helm list -n monitoring --filter '^grafana$' --short || true
      register: grafana_installed
      changed_when: false

    - name: 🔄 Actualizar repositorios de Helm
      command: helm repo update

    - name: 📄 Renderizar nuevos valores para Prometheus
      template:
        src: helm/prometheus/values-prometheus.yaml.j2
        dest: "{{ prometheus_values_path }}"

    - name: 🚀 Upgrade Prometheus
      when: prometheus_installed.stdout != ""
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: prometheus
        chart_ref: prometheus-community/prometheus
        release_namespace: monitoring
        chart_version: "{{ prometheus_chart_version }}"
        create_namespace: false
        values_files:
          - "{{ prometheus_values_path }}"
        state: present

    - name: 📄 Renderizar nuevos valores para Grafana
      template:
        src: helm/grafana/values-grafana.yaml.j2
        dest: "{{ grafana_values_path }}"

    - name: 🚀 Upgrade Grafana
      when: grafana_installed.stdout != ""
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: grafana
        chart_ref: grafana/grafana
        release_namespace: monitoring
        chart_version: "{{ grafana_chart_version }}"
        create_namespace: false
        values_files:
          - "{{ grafana_values_path }}"
        state: present

    - name: 📦 Verificar estado de los pods en 'monitoring'
      shell: kubectl get pods -n monitoring
      register: pod_status
      changed_when: false
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: 🔍 Mostrar estado de los pods
      debug:
        var: pod_status.stdout_lines

    - name: ✅ Confirmación final
      debug:
        msg: "✅ Upgrade de Prometheus + Grafana completado con éxito."