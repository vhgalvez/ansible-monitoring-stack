#  uninstall_stack.yml
---
# üßº Playbook para eliminar por completo Prometheus + Grafana + namespace + RBAC

- name: üßº Eliminar stack de monitoreo (Prometheus + Grafana)
  hosts: controller
  become: true
  gather_facts: false
  vars:
    ns: monitoring
    kubeconfig_path: "/home/victory/.kube/config"
    kubectl_path: "/usr/local/bin/kubectl"
    helm_path: "/usr/local/bin/helm" # Ruta de Helm, si no est√° en el PATH

  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
    PATH: "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"

  tasks:
    - name: üîç Verificar si el namespace '{{ ns }}' existe
      command: "{{ kubectl_path }} get namespace {{ ns }}"
      register: ns_check
      failed_when: false
      changed_when: false

    - name: ‚ùå Desinstalar Prometheus con Helm
      command: "{{ helm_path }} uninstall prometheus -n {{ ns }}"
      when: ns_check.rc == 0
      ignore_errors: true

    - name: ‚ùå Desinstalar Grafana con Helm
      command: "{{ helm_path }} uninstall grafana -n {{ ns }}"
      when: ns_check.rc == 0
      ignore_errors: true

    - name: üßΩ Eliminar todos los recursos del namespace
      shell: "{{ kubectl_path }} delete pvc,svc,pod,secret,configmap --all -n {{ ns }} --ignore-not-found=true"
      when: ns_check.rc == 0
      ignore_errors: true

    - name: ‚ùå Eliminar namespace '{{ ns }}'
      command: "{{ kubectl_path }} delete namespace {{ ns }} --ignore-not-found=true"
      when: ns_check.rc == 0
      register: ns_delete
      ignore_errors: true

    - name: üí§ Esperar 5s antes de verificar nuevamente
      pause:
        seconds: 5
      when: ns_check.rc == 0

    - name: üîÅ Comprobar si el namespace a√∫n existe
      command: "{{ kubectl_path }} get namespace {{ ns }}"
      register: ns_still_exists
      failed_when: false
      changed_when: false

    - name: üõ† Eliminar finalizers si el namespace est√° colgado
      shell: |
        {{ kubectl_path }} get namespace {{ ns }} -o json \
        | jq 'del(.spec.finalizers)' \
        | {{ kubectl_path }} replace --raw "/api/v1/namespaces/{{ ns }}/finalize" -f -
      when:
        - ns_still_exists.rc == 0
      ignore_errors: true

    - name: ‚úÖ Confirmaci√≥n final del namespace
      shell: "{{ kubectl_path }} get namespace {{ ns }}"
      register: ns_check_final
      failed_when: false
      changed_when: false

    - name: ‚úÖ Namespace eliminado correctamente
      debug:
        msg: "‚úÖ Namespace '{{ ns }}' eliminado correctamente."
      when: ns_check_final.rc != 0

    - name: ‚ö†Ô∏è El namespace a√∫n persiste
      debug:
        msg: "‚ö†Ô∏è Namespace '{{ ns }}' a√∫n est√° activo. Revisa si hay CRDs o operadores recre√°ndolo autom√°ticamente."
      when: ns_check_final.rc == 0

    # **Eliminar RBAC relacionados con monitoreo**
    - name: ‚ùå Eliminar ClusterRole 'system:monitoring'
      command: "{{ kubectl_path }} delete clusterrole system:monitoring --ignore-not-found=true"
      ignore_errors: true

    - name: ‚ùå Eliminar ClusterRoleBinding 'system:monitoring'
      command: "{{ kubectl_path }} delete clusterrolebinding system:monitoring --ignore-not-found=true"
      ignore_errors: true

    - name: ‚ùå Eliminar los RoleBindings en el namespace de monitoreo
      shell: "{{ kubectl_path }} get rolebinding -n {{ ns }} -o name | grep monitoring | xargs -I {} {{ kubectl_path }} delete {} -n {{ ns }}"
      ignore_errors: true

    - name: ‚ùå Eliminar los ClusterRoleBindings en el cl√∫ster
      shell: "{{ kubectl_path }} get clusterrolebinding -o name | grep monitoring | xargs -I {} {{ kubectl_path }} delete {}"
      ignore_errors: true

    - name: ‚ùå Eliminar CRDs relacionadas con monitoreo (si existen)
      shell: |
        {{ kubectl_path }} get crd | grep monitoring | awk '{print $1}' | xargs -n 1 {{ kubectl_path }} delete crd
      ignore_errors: true